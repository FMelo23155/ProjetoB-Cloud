#!/bin/bash
set -e

echo "üß™ Teste de Failover PostgreSQL High Availability"
echo "================================================"
echo "Data: $(date)"
echo

# Fun√ß√£o para testar conex√£o
test_connection() {
    local desc=$1
    echo -n "üîç Testando $desc... "
    
    if docker run --rm --network my_stack_webnet postgres:15 \
        psql -h postgres-ha -U cnv_user -d cnv_project \
        -c "SELECT 'Connection OK - ' || current_timestamp;" &>/dev/null; then
        echo "‚úÖ SUCESSO"
        return 0
    else
        echo "‚ùå FALHA"
        return 1
    fi
}

# Fun√ß√£o para verificar HAProxy stats
check_haproxy_stats() {
    echo "üìä Status HAProxy:"
    curl -s http://10.10.20.11:8404/stats 2>/dev/null | grep -E "(postgres-primary|postgres-secondary)" | 
    while read line; do
        if echo "$line" | grep -q "UP"; then
            echo "   ‚úÖ $(echo "$line" | grep -o 'postgres-[^<]*')"
        else
            echo "   ‚ùå $(echo "$line" | grep -o 'postgres-[^<]*')"
        fi
    done || echo "   ‚ö†Ô∏è  N√£o foi poss√≠vel obter estat√≠sticas"
}

# Fun√ß√£o para inserir dados de teste
insert_test_data() {
    local message=$1
    echo "üìù Inserindo dados de teste: $message"
    
    docker run --rm --network my_stack_webnet postgres:15 \
        psql -h postgres-ha -U cnv_user -d cnv_project \
        -c "
        CREATE TABLE IF NOT EXISTS test_failover (
            id SERIAL PRIMARY KEY,
            timestamp TIMESTAMP DEFAULT NOW(),
            message TEXT
        );
        INSERT INTO test_failover (message) VALUES ('$message - $(date)');
        " &>/dev/null || echo "   ‚ö†Ô∏è  Erro ao inserir dados"
}

# Fun√ß√£o para contar registros
count_records() {
    echo -n "üìä Total de registros: "
    docker run --rm --network my_stack_webnet postgres:15 \
        psql -h postgres-ha -U cnv_user -d cnv_project \
        -c "SELECT COUNT(*) FROM test_failover;" -t 2>/dev/null | tr -d ' ' || echo "Erro"
}

echo "1Ô∏è‚É£ ESTADO INICIAL:"
echo "=================="
test_connection "Conex√£o inicial"
check_haproxy_stats
insert_test_data "Dados antes do failover"
count_records

echo ""
echo "2Ô∏è‚É£ SIMULANDO FALHA DO PRIMARY:"
echo "==============================="
echo "üõë Parando PostgreSQL Primary..."
docker service scale my_stack_postgres-primary=0

echo "‚è≥ Aguardando detec√ß√£o de falha (30 segundos)..."
for i in {1..30}; do
    echo -n "."
    sleep 1
done
echo

echo ""
echo "3Ô∏è‚É£ ESTADO AP√ìS FALHA:"
echo "====================="
test_connection "Conex√£o ap√≥s falha"
check_haproxy_stats
insert_test_data "Dados durante failover"
count_records

echo ""
echo "4Ô∏è‚É£ RESTAURANDO PRIMARY:"
echo "======================="
echo "üîÑ Reiniciando PostgreSQL Primary..."
docker service scale my_stack_postgres-primary=1

echo "‚è≥ Aguardando recupera√ß√£o (60 segundos)..."
for i in {1..60}; do
    echo -n "."
    sleep 1
done
echo

echo ""
echo "5Ô∏è‚É£ ESTADO FINAL:"
echo "================"
test_connection "Conex√£o final"
check_haproxy_stats
insert_test_data "Dados ap√≥s recupera√ß√£o"
count_records

echo ""
echo "üìã RESUMO DO TESTE:"
echo "=================="
echo "‚úÖ Teste de failover conclu√≠do!"
echo ""
echo "üìä Verificar dados inseridos:"
echo "docker run --rm --network my_stack_webnet postgres:15 \\"
echo "  psql -h postgres-ha -U cnv_user -d cnv_project \\"
echo "  -c \"SELECT * FROM test_failover ORDER BY timestamp;\""
echo ""
echo "üîç Monitorar logs:"
echo "docker service logs my_stack_postgres-ha -f"
